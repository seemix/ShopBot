const T = require('../locales/ru');
const t = require('../locales/ru').cart;
const db = require('../db/services');
const buildCartKeyboard = require('../keyboards/cartMenu');

module.exports = function cartHandler(bot) {
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫ –ø–æ –∑–≤–∏—á–∞–π–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ
    bot.on('message', async (msg) => {
        if (msg.text !== T.Cart) return;

        const chatId = msg.chat.id;
        const userId = String(msg.from.id);

        const cart = await db.getCart(userId);
        if (!cart.length) {
            return bot.sendMessage(chatId, t.yourCartIsEmpty);
        }

        const { text, keyboard } = buildCartView(cart);
        await bot.sendMessage(chatId, text, { reply_markup: keyboard });
    });

    // –û–±—Ä–æ–±–∫–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–æ—à–∏–∫–∞
    bot.on('callback_query', async (query) => {
        const data = query.data || '';
        const chatId = query.message.chat.id;
        const userId = String(query.from.id);

        // —Ä–µ–∞–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–æ–¥—ñ—ó –∫–æ—à–∏–∫–∞
        const isInc = data.startsWith('inc_');
        const isDec = data.startsWith('dec_');
        const isDel = data.startsWith('del_');
        const isClear = data === 'clear_cart';

        if (!(isInc || isDec || isDel || isClear)) {
            return; // –Ω–µ –Ω–∞—à callback ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        }

        try {
            // –º–∏—Ç—Ç—î–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ timeout
            await bot.answerCallbackQuery(query.id);

            if (isInc) {
                const productId = data.slice(4);
                db.updateCartQuantity(1, userId, productId);
            } else if (isDec) {
                const productId = data.slice(4);
                db.updateCartQuantity(-1, userId, productId);
            } else if (isDel) {
                const productId = data.slice(4);
                db.removeItem(userId, productId);
            } else if (isClear) {
                db.clearCart(userId);
            }

            // –æ–Ω–æ–≤–ª—é—î–º–æ —Å–∞–º–µ —Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑ —è–∫–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É
            const updatedCart = db.getCart(userId);

            if (updatedCart.length) {
                const { text, keyboard } = buildCartView(updatedCart);
                await bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: keyboard
                });
            } else {
                // –∫–æ—à–∏–∫ —Å–ø–æ—Ä–æ–∂–Ω—ñ–≤ ‚Äî –∑–∞–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
                await bot.editMessageText(t.yourCartIsEmpty, {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: { inline_keyboard: [] }
                });
            }
        } catch (err) {
            console.error(T.Error, err);
            // –Ω–∞ –≤—Å—è–∫: —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try {
                const updatedCart = db.getCart(userId);
                if (updatedCart.length) {
                    const { text, keyboard } = buildCartView(updatedCart);
                    await bot.sendMessage(chatId, text, { reply_markup: keyboard });
                } else {
                    await bot.sendMessage(chatId, t.yourCartIsEmpty);
                }
            } catch (_) {}
        }
    });
};

// –¥–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä—É —Ç–µ–∫—Å—Ç—É —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
function buildCartView(cart) {
    let total = 0;
    let text = t.yourCart+'\n\n';
    for (const item of cart) {
        const lineTotal = Number(item.price) * Number(item.quantity);
        total += lineTotal;
        text += `${item.name}\n${t.quantity} ${item.quantity} ¬∑ üíµ ${lineTotal.toFixed(2)}\n\n`;
    }
    text += `${t.totalSum} ${total.toFixed(2)} MDL`;

    return { text, keyboard: buildCartKeyboard(cart) };
}